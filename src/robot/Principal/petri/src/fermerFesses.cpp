/*
 * Generated by the petri net editor - https://github.com/rems4e/petri
 * Version 2.1.5
 */

#include "../Deplacement.h"
#include "../Servo.h"
#include "../Utils.h"
#include "Runtime/Cpp/Action.h"
#include "Runtime/Cpp/Atomic.h"
#include "Runtime/Cpp/MemberPetriDynamicLib.h"
#include "Runtime/Cpp/PetriDebug.h"
#include "Runtime/Cpp/PetriUtils.h"
#include <cstdint>

#define EXPORT extern "C"
#define PETRI_PREFIX "fermerFesses"

using namespace Petri;

struct FillResult {
	void* start;
	void* end;
};


static Petri_actionResult_t state_0_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_3_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_4_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_5_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(fermerFesseGauche());
}

static Petri_actionResult_t state_6_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::pause(static_cast<std::chrono::nanoseconds>(200_ms)));
}

static Petri_actionResult_t state_7_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(fermerFesseDroite());
}

static bool transition_13_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_8_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_9_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_10_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_11_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_12_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}


EXPORT FillResult fermerFesses_fill(PetriNet& petriNet, std::uint64_t entitiesOffset, std::uint_fast32_t variablesOffset, bool firstLevel) {
	auto& state_0 =
	    petriNet.addAction(Action(petriNet, 0 + entitiesOffset, "Root_Entry", &state_0_invocation, 0), firstLevel, variablesOffset);
	auto& state_3 = petriNet.addAction(Action(petriNet, 3 + entitiesOffset, "Root_End", &state_3_invocation, 2), false, variablesOffset);
	auto& state_4 = petriNet.addAction(Action(petriNet, 4 + entitiesOffset, "Root_BEGIN", &state_4_invocation, 0), false, variablesOffset);
	auto& state_5 = petriNet.addAction(Action(petriNet, 5 + entitiesOffset, "Root_5", &state_5_invocation, 1), false, variablesOffset);
	auto& state_6 = petriNet.addAction(Action(petriNet, 6 + entitiesOffset, "Root_6", &state_6_invocation, 1), false, variablesOffset);
	auto& state_7 = petriNet.addAction(Action(petriNet, 7 + entitiesOffset, "Root_7", &state_7_invocation, 1), false, variablesOffset);


	auto& transition_13 = state_0.addTransition(13 + entitiesOffset, "Root_Entry_to_BEGIN", state_4, &transition_13_invocation);
	auto& transition_8 = state_4.addTransition(8 + entitiesOffset, "Root_8", state_5, &transition_8_invocation);
	auto& transition_9 = state_5.addTransition(9 + entitiesOffset, "Root_9", state_3, &transition_9_invocation);
	auto& transition_10 = state_4.addTransition(10 + entitiesOffset, "Root_10", state_6, &transition_10_invocation);
	auto& transition_11 = state_6.addTransition(11 + entitiesOffset, "Root_11", state_7, &transition_11_invocation);
	auto& transition_12 = state_7.addTransition(12 + entitiesOffset, "Root_12", state_3, &transition_12_invocation);

	return (FillResult){&state_0, &state_3};
}

EXPORT void* fermerFesses_create() {
	auto petriNet = std::make_unique<PetriNet>(PETRI_PREFIX);
	fermerFesses_fill(*petriNet, 0, 0, true);
	return petriNet.release();
}

EXPORT void* fermerFesses_createDebug() {
	auto petriNet = std::make_unique<PetriDebug>(PETRI_PREFIX);
	fermerFesses_fill(*petriNet, 0, 0, true);
	return petriNet.release();
}

EXPORT char const* fermerFesses_getHash() {
	return "000E4ABDA3733EF99886408185914BA5BB9B6535";
}

#define NO_C_PETRI_NET
#include "Runtime/C/detail/Types.hpp"

EXPORT void* fermerFesses_createLibForEditor() {
	return new ::PetriDynamicLib{std::make_unique<::Petri::MemberPetriDynamicLib>(false, "fermerFesses", 12346)};
}
