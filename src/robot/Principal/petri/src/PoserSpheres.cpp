/*
 * Generated by PetriLab - https://sigilence-technologies.com/petrilab
 * Version 3.0.0-beta1
 */

#include "../Deplacement.h"
#include "../Moteur.h"
#include "../Servo.h"
#include "../Utils.h"
#include <cstdint>
#include <petrilab/Cpp/Action.h>
#include <petrilab/Cpp/MemberPetriDynamicLib.h>
#include <petrilab/Cpp/PetriDebug.h>
#include <petrilab/Cpp/PetriUtils.h>
#include <petrilab/Cpp/VarSlot.h>
#include <petrilab/Cpp/Variable.h>

using namespace Petri;

struct FillResult {
	void* start;
	void* end;
};

enum Petri_Var_Enum : std::uint_fast32_t { Petri_Var_Enum_Vresult = 0 };

static void fillVariables(Petri::VarSlot& variables) {
	variables[Petri_Var_Enum_Vresult].setName("$result");
	variables[Petri_Var_Enum_Vresult].setDefaultValue(0);
}

extern "C" Petri_actionResult_t PoserSpheres_entryInit(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	if(!_PETRI_PRIVATE_GET_VARIABLES_.isFirstSlot()) {
		_PETRI_PRIVATE_GET_VARIABLES_.pushVariables(1);
	}
	fillVariables(_PETRI_PRIVATE_GET_VARIABLES_);
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

extern "C" Petri_actionResult_t PoserSpheres_exitAction(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_EXEC_RESULT_ = static_cast<actionResult_t>(Petri::Utility::doNothing());
	auto _PETRI_PRIVATE_GET_RETURN_VALUE_0_ = _PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vresult].value();
	_PETRI_PRIVATE_GET_VARIABLES_.pop();
	_PETRI_PRIVATE_GET_VARIABLES_.pushReturnValues(1);
	_PETRI_PRIVATE_GET_VARIABLES_[0].setName("result");
	_PETRI_PRIVATE_GET_VARIABLES_[0].value() = _PETRI_PRIVATE_GET_RETURN_VALUE_0_;
	return _PETRI_PRIVATE_EXEC_RESULT_;
}

static Petri_actionResult_t state_3_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static bool transition_5_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_4_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}


extern "C" FillResult PoserSpheres_fill(PetriNet& petriNet,
                                        std::uint64_t entitiesOffset,
                                        bool firstLevel,
                                        Petri_actionResult_t (*initEntryPtr)(VarSlot&),
                                        Petri_actionResult_t (*exitActionPtr)(VarSlot&)) {
	auto& state_0 = petriNet.addAction(Action(0 + entitiesOffset, "Root_Entry", initEntryPtr, 0), firstLevel);
	auto& state_2 = petriNet.addAction(Action(2 + entitiesOffset, "Root_End", exitActionPtr, 1), false);
	auto& state_3 = petriNet.addAction(Action(3 + entitiesOffset, "Root_BEGIN", &state_3_invocation, 0), false);


	state_0.addTransition(5 + entitiesOffset, "Root_Entry_to_BEGIN", state_3, &transition_5_invocation);
	state_3.addTransition(4 + entitiesOffset, "Root_", state_2, &transition_4_invocation);

	return (FillResult){&state_0, &state_2};
}
namespace Petri {
	namespace Generated {
		namespace PoserSpheres {
			std::unique_ptr<::Petri::PetriNet> createPetriNet() {
				auto petriNet = std::make_unique<PetriNet>("PoserSpheres", 1);
				petriNet->setLogVerbosity(PetriNet::VerbosityNothing);
				PoserSpheres_fill(*petriNet, 0, true, &PoserSpheres_entryInit, &PoserSpheres_exitAction);
				fillVariables(petriNet->variables());
				return petriNet;
			}

			std::unique_ptr<::Petri::PetriDebug> createDebugPetriNet() {
				auto petriNet = std::make_unique<PetriDebug>("PoserSpheres", 1);
				petriNet->setLogVerbosity(PetriNet::VerbosityNothing);
				PoserSpheres_fill(*petriNet, 0, true, &PoserSpheres_entryInit, &PoserSpheres_exitAction);
				fillVariables(petriNet->variables());
				return petriNet;
			}
		}
	}
}

extern "C" void* PoserSpheres_create() {
	return Petri::Generated::PoserSpheres::createPetriNet().release();
}

extern "C" void* PoserSpheres_createDebug() {
	return Petri::Generated::PoserSpheres::createDebugPetriNet().release();
}

extern "C" char* PoserSpheres_evaluate(void* vars, char const* libPath) {
	return Petri::Utility::loadEvaluateAndInvoke(vars, libPath, "PoserSpheres");
}
extern "C" char const* PoserSpheres_getHash() {
	return "19DD95511AEB556B005E906BF92CEBF4FD643AAE25BB23E95E19A0B3F9EA716C";
}


extern "C" void* PoserSpheres_createLibForEditor() {
	return ::Petri::MemberPetriDynamicLib::libForEditor("PoserSpheres", 12346);
}
