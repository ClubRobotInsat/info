/*
 * Generated by the petri net editor - https://github.com/rems4e/petri
 * Version 2.0.1
 */

#include "../Deplacement.h"
#include "../Servo.h"
#include "../Utils.h"
#include "Runtime/Cpp/Action.h"
#include "Runtime/Cpp/Atomic.h"
#include "Runtime/Cpp/PetriDebug.h"
#include "Runtime/Cpp/PetriUtils.h"
#include <cstdint>

#include "Homologation.h"

#define EXPORT extern "C"
#define PETRI_PREFIX "Homologation"

using namespace Petri;

struct FillResult {
	void* start;
	void* end;
};


static Petri_actionResult_t state_0_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_1_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_2_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static bool transition_3_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}


EXPORT FillResult Homologation_fill(PetriNet& petriNet, std::uint64_t entitiesOffset, std::uint_fast32_t variablesOffset, bool firstLevel) {
	auto& state_0 =
	    petriNet.addAction(Action(petriNet, 0 + entitiesOffset, "Root_Entry", &state_0_invocation, 0), firstLevel, variablesOffset);
	auto& state_1 = petriNet.addAction(Action(petriNet, 1 + entitiesOffset, "Root_178", &state_1_invocation, 0), false, variablesOffset);
	auto& state_2 = petriNet.addAction(Action(petriNet, 2 + entitiesOffset, "Root_End", &state_2_invocation, 0), false, variablesOffset);


	auto& transition_3 = state_0.addTransition(3 + entitiesOffset, "Root_Entry_to_178", state_1, &transition_3_invocation);

	return (FillResult){&state_0, &state_2};
}

EXPORT void* Homologation_create() {
	auto petriNet = std::make_unique<PetriNet>(PETRI_PREFIX);
	Homologation_fill(*petriNet, 0, 0, true);
	return petriNet.release();
}

EXPORT void* Homologation_createDebug() {
	auto petriNet = std::make_unique<PetriDebug>(PETRI_PREFIX);
	Homologation_fill(*petriNet, 0, 0, true);
	return petriNet.release();
}

EXPORT char const* Homologation_getHash() {
	return "650587A8AFFCB92D4729FEB51477E2F54E725CC8";
}

#define NO_C_PETRI_NET
#include "Runtime/C/detail/Types.hpp"

EXPORT void* Homologation_createLibForEditor() {
	return new ::PetriDynamicLib{std::make_unique<::Petri::MemberPetriDynamicLib>(false, "Homologation", "Homologation", 12346)};
}
