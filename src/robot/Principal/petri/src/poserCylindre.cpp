/*
 * Generated by the petri net editor - https://github.com/rems4e/petri
 * Version 2.1.7
 */

#include "../Deplacement.h"
#include "../Servo.h"
#include "../Utils.h"
#include "Runtime/Cpp/Action.h"
#include "Runtime/Cpp/Atomic.h"
#include "Runtime/Cpp/MemberPetriDynamicLib.h"
#include "Runtime/Cpp/PetriDebug.h"
#include "Runtime/Cpp/PetriUtils.h"
#include <cstdint>

#define EXPORT extern "C"
#define PETRI_PREFIX "poserCylindre"

using namespace Petri;

struct FillResult {
	void* start;
	void* end;
};


static Petri_actionResult_t state_0_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_5_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_6_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(destockerCylindre());
}

static Petri_actionResult_t state_7_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_8_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(pencherPinceBas());
}

static Petri_actionResult_t state_9_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(avancerDe(static_cast<Distance>(10_cm)));
}

static Petri_actionResult_t state_10_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(ouvrirPince());
}

static Petri_actionResult_t state_11_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(reculerDe(static_cast<Distance>(15_cm)));
}

static Petri_actionResult_t state_12_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(fermerPince());
}

static Petri_actionResult_t state_13_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(avancerDe(static_cast<Distance>(15_cm)));
}

static Petri_actionResult_t state_14_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(reculerDe(static_cast<Distance>(10_cm)));
}

static Petri_actionResult_t state_15_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(
	    Petri::Utility::printText(static_cast<std::string const&>("Echec de destockerCylindre")));
}

static Petri_actionResult_t state_16_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(ascenseurPoserRails());
}

static bool transition_30_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_17_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return getNbrCylindres() > 0;
}

static bool transition_18_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_19_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return getNbrCylindres() == 0;
}

static bool transition_20_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_21_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_22_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_23_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_24_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_25_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_26_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_27_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return _PETRI_PRIVATE_GET_ACTION_RESULT_ != static_cast<actionResult_t>(ResultatAction::REUSSI);
}

static bool transition_28_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_29_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}


EXPORT FillResult poserCylindre_fill(PetriNet& petriNet, std::uint64_t entitiesOffset, std::uint_fast32_t variablesOffset, bool firstLevel) {
	auto& state_0 =
	    petriNet.addAction(Action(petriNet, 0 + entitiesOffset, "Root_Entry", &state_0_invocation, 0), firstLevel, variablesOffset);
	auto& state_5 = petriNet.addAction(Action(petriNet, 5 + entitiesOffset, "Root_End", &state_5_invocation, 2), false, variablesOffset);
	auto& state_6 =
	    petriNet.addAction(Action(petriNet, 6 + entitiesOffset, "Root_destocke", &state_6_invocation, 1), false, variablesOffset);
	auto& state_7 = petriNet.addAction(Action(petriNet, 7 + entitiesOffset, "Root_++", &state_7_invocation, 1), false, variablesOffset);
	auto& state_8 = petriNet.addAction(Action(petriNet, 8 + entitiesOffset, "Root_19", &state_8_invocation, 1), false, variablesOffset);
	auto& state_9 = petriNet.addAction(Action(petriNet, 9 + entitiesOffset, "Root_21", &state_9_invocation, 1), false, variablesOffset);
	auto& state_10 =
	    petriNet.addAction(Action(petriNet, 10 + entitiesOffset, "Root_Pose", &state_10_invocation, 1), false, variablesOffset);
	auto& state_11 =
	    petriNet.addAction(Action(petriNet, 11 + entitiesOffset, "Root_31", &state_11_invocation, 1), false, variablesOffset);
	auto& state_12 =
	    petriNet.addAction(Action(petriNet, 12 + entitiesOffset, "Root_13", &state_12_invocation, 1), false, variablesOffset);
	auto& state_13 =
	    petriNet.addAction(Action(petriNet, 13 + entitiesOffset, "Root_Pousse", &state_13_invocation, 1), false, variablesOffset);
	auto& state_14 =
	    petriNet.addAction(Action(petriNet, 14 + entitiesOffset, "Root_26", &state_14_invocation, 1), false, variablesOffset);
	auto& state_15 =
	    petriNet.addAction(Action(petriNet, 15 + entitiesOffset, "Root_26", &state_15_invocation, 1), false, variablesOffset);
	auto& state_16 =
	    petriNet.addAction(Action(petriNet, 16 + entitiesOffset, "Root_28", &state_16_invocation, 1), false, variablesOffset);


	auto& transition_30 = state_0.addTransition(30 + entitiesOffset, "Root_Entry_to_++", state_7, &transition_30_invocation);
	auto& transition_17 = state_7.addTransition(17 + entitiesOffset, "Root_17", state_6, &transition_17_invocation);
	auto& transition_18 = state_8.addTransition(18 + entitiesOffset, "Root_22", state_9, &transition_18_invocation);
	auto& transition_19 = state_7.addTransition(19 + entitiesOffset, "Root_26", state_5, &transition_19_invocation);
	auto& transition_20 = state_9.addTransition(20 + entitiesOffset, "Root_32", state_10, &transition_20_invocation);
	auto& transition_21 = state_10.addTransition(21 + entitiesOffset, "Root_33", state_11, &transition_21_invocation);
	auto& transition_22 = state_11.addTransition(22 + entitiesOffset, "Root_27", state_12, &transition_22_invocation);
	auto& transition_23 = state_12.addTransition(23 + entitiesOffset, "Root_29", state_13, &transition_23_invocation);
	auto& transition_24 = state_13.addTransition(24 + entitiesOffset, "Root_27", state_14, &transition_24_invocation);
	auto& transition_25 = state_14.addTransition(25 + entitiesOffset, "Root_28", state_7, &transition_25_invocation);
	auto& transition_26 = state_15.addTransition(26 + entitiesOffset, "Root_27", state_5, &transition_26_invocation);
	auto& transition_27 = state_6.addTransition(27 + entitiesOffset, "Root_28", state_15, &transition_27_invocation);
	auto& transition_28 = state_6.addTransition(28 + entitiesOffset, "Root_29", state_16, &transition_28_invocation);
	auto& transition_29 = state_16.addTransition(29 + entitiesOffset, "Root_30", state_8, &transition_29_invocation);

	return (FillResult){&state_0, &state_5};
}

EXPORT void* poserCylindre_create() {
	auto petriNet = std::make_unique<PetriNet>(PETRI_PREFIX);
	poserCylindre_fill(*petriNet, 0, 0, true);
	return petriNet.release();
}

EXPORT void* poserCylindre_createDebug() {
	auto petriNet = std::make_unique<PetriDebug>(PETRI_PREFIX);
	poserCylindre_fill(*petriNet, 0, 0, true);
	return petriNet.release();
}

EXPORT char const* poserCylindre_getHash() {
	return "FB5B98E7BE36B679DDCA5203382B27E16CF38223";
}

#define NO_C_PETRI_NET
#include "Runtime/C/detail/Types.hpp"

EXPORT void* poserCylindre_createLibForEditor() {
	return new ::PetriDynamicLib{std::make_unique<::Petri::MemberPetriDynamicLib>(false, "poserCylindre", 12346)};
}
