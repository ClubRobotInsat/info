/*
 * Generated by PetriLab - https://sigilence-technologies.com/petrilab
 * Version 3.0.0-beta1
 */

#include "../Deplacement.h"
#include "../Moteur.h"
#include "../Servo.h"
#include "../Utils.h"
#include <cstdint>
#include <petrilab/Cpp/Action.h>
#include <petrilab/Cpp/MemberPetriDynamicLib.h>
#include <petrilab/Cpp/PetriDebug.h>
#include <petrilab/Cpp/PetriUtils.h>
#include <petrilab/Cpp/VarSlot.h>
#include <petrilab/Cpp/Variable.h>

using namespace Petri;

struct FillResult {
	void* start;
	void* end;
};

extern "C" FillResult PoserSpheres_fill(PetriNet& petriNet,
                                        std::uint64_t entitiesOffset,
                                        bool firstLevel,
                                        Petri_actionResult_t (*initEntryPtr)(VarSlot&),
                                        Petri_actionResult_t (*exitActionPtr)(VarSlot&));
extern "C" Petri_actionResult_t PoserSpheres_entryInit(VarSlot&);
extern "C" Petri_actionResult_t PoserSpheres_exitAction(VarSlot&);
extern "C" FillResult GoberCube_fill(PetriNet& petriNet,
                                     std::uint64_t entitiesOffset,
                                     bool firstLevel,
                                     Petri_actionResult_t (*initEntryPtr)(VarSlot&),
                                     Petri_actionResult_t (*exitActionPtr)(VarSlot&));
extern "C" Petri_actionResult_t GoberCube_entryInit(VarSlot&);
extern "C" Petri_actionResult_t GoberCube_exitAction(VarSlot&);
extern "C" FillResult OuvrirReservoir_fill(PetriNet& petriNet,
                                           std::uint64_t entitiesOffset,
                                           bool firstLevel,
                                           Petri_actionResult_t (*initEntryPtr)(VarSlot&),
                                           Petri_actionResult_t (*exitActionPtr)(VarSlot&));
extern "C" Petri_actionResult_t OuvrirReservoir_entryInit(VarSlot&);
extern "C" Petri_actionResult_t OuvrirReservoir_exitAction(VarSlot&);
extern "C" FillResult ActiverSwitch_fill(PetriNet& petriNet,
                                         std::uint64_t entitiesOffset,
                                         bool firstLevel,
                                         Petri_actionResult_t (*initEntryPtr)(VarSlot&),
                                         Petri_actionResult_t (*exitActionPtr)(VarSlot&));
extern "C" Petri_actionResult_t ActiverSwitch_entryInit(VarSlot&);
extern "C" Petri_actionResult_t ActiverSwitch_exitAction(VarSlot&);
extern "C" FillResult ActiverAbeille_fill(PetriNet& petriNet,
                                          std::uint64_t entitiesOffset,
                                          bool firstLevel,
                                          Petri_actionResult_t (*initEntryPtr)(VarSlot&),
                                          Petri_actionResult_t (*exitActionPtr)(VarSlot&));
extern "C" Petri_actionResult_t ActiverAbeille_entryInit(VarSlot&);
extern "C" Petri_actionResult_t ActiverAbeille_exitAction(VarSlot&);
extern "C" FillResult PoserCubes_fill(PetriNet& petriNet,
                                      std::uint64_t entitiesOffset,
                                      bool firstLevel,
                                      Petri_actionResult_t (*initEntryPtr)(VarSlot&),
                                      Petri_actionResult_t (*exitActionPtr)(VarSlot&));
extern "C" Petri_actionResult_t PoserCubes_entryInit(VarSlot&);
extern "C" Petri_actionResult_t PoserCubes_exitAction(VarSlot&);
enum Petri_Var_Enum : std::uint_fast32_t { Petri_Var_Enum_Vaction = 0 };

static void fillVariables(Petri::VarSlot& variables) {
	variables[Petri_Var_Enum_Vaction].setName("$action");
	variables[Petri_Var_Enum_Vaction].setDefaultValue(42);
}

extern "C" Petri_actionResult_t IA2018_entryInit(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	if(!_PETRI_PRIVATE_GET_VARIABLES_.isFirstSlot()) {
		_PETRI_PRIVATE_GET_VARIABLES_.pushVariables(1);
	}
	fillVariables(_PETRI_PRIVATE_GET_VARIABLES_);
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

extern "C" Petri_actionResult_t IA2018_exitAction(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_EXEC_RESULT_ = static_cast<actionResult_t>(Petri::Utility::doNothing());
	_PETRI_PRIVATE_GET_VARIABLES_.pop();
	_PETRI_PRIVATE_GET_VARIABLES_.pushReturnValues(0);
	return _PETRI_PRIVATE_EXEC_RESULT_;
}

static Petri_actionResult_t state_6_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(Petri::Utility::printText(static_cast<std::string const&>(
	    "End of petri for action n°" + std::to_string(_PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vaction].value()))));
}

static Petri_actionResult_t state_14_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_91_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(
	    Petri::Utility::printText(static_cast<std::string const&>("Pétri déterministe lancé")));
}

static Petri_actionResult_t state_92_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(Petri::Utility::printText(static_cast<std::string const&>(
	    "Action choisie : n°" + std::to_string(_PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vaction].value()))));
}

static Petri_actionResult_t state_7_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_TEMP_ = PoserSpheres_entryInit(_PETRI_PRIVATE_GET_VARIABLES_);
	return _PETRI_PRIVATE_TEMP_;
}

static Petri_actionResult_t state_7_fetchReturnValues(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_EXEC_RESULT_ = PoserSpheres_exitAction(_PETRI_PRIVATE_GET_VARIABLES_);
	_PETRI_PRIVATE_GET_VARIABLES_.pop();
	return _PETRI_PRIVATE_EXEC_RESULT_;
}

static Petri_actionResult_t state_15_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_TEMP_ = GoberCube_entryInit(_PETRI_PRIVATE_GET_VARIABLES_);
	return _PETRI_PRIVATE_TEMP_;
}

static Petri_actionResult_t state_15_fetchReturnValues(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_EXEC_RESULT_ = GoberCube_exitAction(_PETRI_PRIVATE_GET_VARIABLES_);
	_PETRI_PRIVATE_GET_VARIABLES_.pop();
	return _PETRI_PRIVATE_EXEC_RESULT_;
}

static Petri_actionResult_t state_39_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_TEMP_ = OuvrirReservoir_entryInit(_PETRI_PRIVATE_GET_VARIABLES_);
	return _PETRI_PRIVATE_TEMP_;
}

static Petri_actionResult_t state_39_fetchReturnValues(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_EXEC_RESULT_ = OuvrirReservoir_exitAction(_PETRI_PRIVATE_GET_VARIABLES_);
	_PETRI_PRIVATE_GET_VARIABLES_.pop();
	return _PETRI_PRIVATE_EXEC_RESULT_;
}

static Petri_actionResult_t state_64_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_TEMP_ = ActiverSwitch_entryInit(_PETRI_PRIVATE_GET_VARIABLES_);
	return _PETRI_PRIVATE_TEMP_;
}

static Petri_actionResult_t state_64_fetchReturnValues(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_EXEC_RESULT_ = ActiverSwitch_exitAction(_PETRI_PRIVATE_GET_VARIABLES_);
	_PETRI_PRIVATE_GET_VARIABLES_.pop();
	return _PETRI_PRIVATE_EXEC_RESULT_;
}

static Petri_actionResult_t state_71_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_TEMP_ = ActiverAbeille_entryInit(_PETRI_PRIVATE_GET_VARIABLES_);
	return _PETRI_PRIVATE_TEMP_;
}

static Petri_actionResult_t state_71_fetchReturnValues(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_EXEC_RESULT_ = ActiverAbeille_exitAction(_PETRI_PRIVATE_GET_VARIABLES_);
	_PETRI_PRIVATE_GET_VARIABLES_.pop();
	return _PETRI_PRIVATE_EXEC_RESULT_;
}

static Petri_actionResult_t state_93_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_TEMP_ = PoserCubes_entryInit(_PETRI_PRIVATE_GET_VARIABLES_);
	return _PETRI_PRIVATE_TEMP_;
}

static Petri_actionResult_t state_93_fetchReturnValues(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_EXEC_RESULT_ = PoserCubes_exitAction(_PETRI_PRIVATE_GET_VARIABLES_);
	_PETRI_PRIVATE_GET_VARIABLES_.pop();
	return _PETRI_PRIVATE_EXEC_RESULT_;
}

static bool transition_116_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_117_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_101_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_102_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return _PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vaction].value() == 6;
}

static bool transition_103_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return _PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vaction].value() == 3;
}

static bool transition_104_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return _PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vaction].value() == 5;
}

static bool transition_105_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return _PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vaction].value() == 2;
}

static bool transition_106_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return _PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vaction].value() == 1;
}

static bool transition_107_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return _PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vaction].value() == 42;
}

static bool transition_108_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_109_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_110_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_111_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_112_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_113_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_114_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return _PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vaction].value() == 4;
}

static bool transition_115_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_,
                                      Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}


extern "C" FillResult IA2018_fill(PetriNet& petriNet,
                                  std::uint64_t entitiesOffset,
                                  bool firstLevel,
                                  Petri_actionResult_t (*initEntryPtr)(VarSlot&),
                                  Petri_actionResult_t (*exitActionPtr)(VarSlot&)) {
	auto& state_0 = petriNet.addAction(Action(0 + entitiesOffset, "Root_Entry", initEntryPtr, 0), firstLevel);
	auto& state_3 = petriNet.addAction(Action(3 + entitiesOffset, "Root_End", exitActionPtr, 1), false);
	auto& state_6 = petriNet.addAction(Action(6 + entitiesOffset, "Root_end", &state_6_invocation, 1), false);
	state_6.addVariable(Petri_Var_Enum_Vaction);
	auto& state_14 = petriNet.addAction(Action(14 + entitiesOffset, "Root_Action selector", &state_14_invocation, 0), false);
	auto& state_91 = petriNet.addAction(Action(91 + entitiesOffset, "Root_Déterministe", &state_91_invocation, 1), false);
	auto& state_92 = petriNet.addAction(Action(92 + entitiesOffset, "Root_print", &state_92_invocation, 0), false);
	state_92.addVariable(Petri_Var_Enum_Vaction);
	auto state_7_endpoints = PoserSpheres_fill(petriNet, entitiesOffset + 7, false, state_7_invocation, state_7_fetchReturnValues);
	(*reinterpret_cast<Action*>(state_7_endpoints.start)).setRequiredTokens(1);
	auto state_15_endpoints = GoberCube_fill(petriNet, entitiesOffset + 15, false, state_15_invocation, state_15_fetchReturnValues);
	(*reinterpret_cast<Action*>(state_15_endpoints.start)).setRequiredTokens(1);
	auto state_39_endpoints =
	    OuvrirReservoir_fill(petriNet, entitiesOffset + 39, false, state_39_invocation, state_39_fetchReturnValues);
	(*reinterpret_cast<Action*>(state_39_endpoints.start)).setRequiredTokens(1);
	auto state_64_endpoints =
	    ActiverSwitch_fill(petriNet, entitiesOffset + 64, false, state_64_invocation, state_64_fetchReturnValues);
	(*reinterpret_cast<Action*>(state_64_endpoints.start)).setRequiredTokens(1);
	auto state_71_endpoints =
	    ActiverAbeille_fill(petriNet, entitiesOffset + 71, false, state_71_invocation, state_71_fetchReturnValues);
	(*reinterpret_cast<Action*>(state_71_endpoints.start)).setRequiredTokens(1);
	auto state_93_endpoints = PoserCubes_fill(petriNet, entitiesOffset + 93, false, state_93_invocation, state_93_fetchReturnValues);
	(*reinterpret_cast<Action*>(state_93_endpoints.start)).setRequiredTokens(1);


	state_0.addTransition(116 + entitiesOffset, "Root_Entry_to_Action selector", state_14, &transition_116_invocation);
	state_0.addTransition(117 + entitiesOffset, "Root_Entry_to_print", state_92, &transition_117_invocation);
	state_6.addTransition(101 + entitiesOffset, "Root_", state_3, &transition_101_invocation);
	auto& transition_102 =
	    state_14.addTransition(102 + entitiesOffset, "Root_A == 6", (*reinterpret_cast<Action*>(state_7_endpoints.start)), &transition_102_invocation);
	transition_102.addVariable(Petri_Var_Enum_Vaction);
	auto& transition_103 = state_14.addTransition(103 + entitiesOffset,
	                                              "Root_A == 3",
	                                              (*reinterpret_cast<Action*>(state_15_endpoints.start)),
	                                              &transition_103_invocation);
	transition_103.addVariable(Petri_Var_Enum_Vaction);
	auto& transition_104 = state_14.addTransition(104 + entitiesOffset,
	                                              "Root_A == 5",
	                                              (*reinterpret_cast<Action*>(state_39_endpoints.start)),
	                                              &transition_104_invocation);
	transition_104.addVariable(Petri_Var_Enum_Vaction);
	auto& transition_105 = state_14.addTransition(105 + entitiesOffset,
	                                              "Root_A == 2",
	                                              (*reinterpret_cast<Action*>(state_64_endpoints.start)),
	                                              &transition_105_invocation);
	transition_105.addVariable(Petri_Var_Enum_Vaction);
	auto& transition_106 = state_14.addTransition(106 + entitiesOffset,
	                                              "Root_A == 1",
	                                              (*reinterpret_cast<Action*>(state_71_endpoints.start)),
	                                              &transition_106_invocation);
	transition_106.addVariable(Petri_Var_Enum_Vaction);
	auto& transition_107 = state_14.addTransition(107 + entitiesOffset, "Root_A == 42", state_91, &transition_107_invocation);
	transition_107.addVariable(Petri_Var_Enum_Vaction);
	(*reinterpret_cast<Action*>(state_71_endpoints.end)).addTransition(108 + entitiesOffset, "Root_end", state_6, &transition_108_invocation);
	(*reinterpret_cast<Action*>(state_64_endpoints.end)).addTransition(109 + entitiesOffset, "Root_end", state_6, &transition_109_invocation);
	(*reinterpret_cast<Action*>(state_15_endpoints.end)).addTransition(110 + entitiesOffset, "Root_end", state_6, &transition_110_invocation);
	(*reinterpret_cast<Action*>(state_39_endpoints.end)).addTransition(111 + entitiesOffset, "Root_end", state_6, &transition_111_invocation);
	(*reinterpret_cast<Action*>(state_7_endpoints.end)).addTransition(112 + entitiesOffset, "Root_end", state_6, &transition_112_invocation);
	state_91.addTransition(113 + entitiesOffset, "Root_end", state_6, &transition_113_invocation);
	auto& transition_114 = state_14.addTransition(114 + entitiesOffset,
	                                              "Root_A == 4",
	                                              (*reinterpret_cast<Action*>(state_93_endpoints.start)),
	                                              &transition_114_invocation);
	transition_114.addVariable(Petri_Var_Enum_Vaction);
	(*reinterpret_cast<Action*>(state_93_endpoints.end)).addTransition(115 + entitiesOffset, "Root_end", state_6, &transition_115_invocation);

	return (FillResult){&state_0, &state_3};
}
namespace Petri {
	namespace Generated {
		namespace IA2018 {
			std::unique_ptr<::Petri::PetriNet> createPetriNet() {
				auto petriNet = std::make_unique<PetriNet>("IA2018", 1);
				petriNet->setLogVerbosity(PetriNet::VerbosityNothing);
				IA2018_fill(*petriNet, 0, true, &IA2018_entryInit, &IA2018_exitAction);
				fillVariables(petriNet->variables());
				return petriNet;
			}

			std::unique_ptr<::Petri::PetriDebug> createDebugPetriNet() {
				auto petriNet = std::make_unique<PetriDebug>("IA2018", 1);
				petriNet->setLogVerbosity(PetriNet::VerbosityNothing);
				IA2018_fill(*petriNet, 0, true, &IA2018_entryInit, &IA2018_exitAction);
				fillVariables(petriNet->variables());
				return petriNet;
			}
		}
	}
}

extern "C" void* IA2018_create() {
	return Petri::Generated::IA2018::createPetriNet().release();
}

extern "C" void* IA2018_createDebug() {
	return Petri::Generated::IA2018::createDebugPetriNet().release();
}

extern "C" char* IA2018_evaluate(void* vars, char const* libPath) {
	return Petri::Utility::loadEvaluateAndInvoke(vars, libPath, "IA2018");
}
extern "C" char const* IA2018_getHash() {
	return "9FF4D3B6595AC8CADABADF22B6DF725EC7E9D66FDE36FC4981BFD4E0A1A69844";
}


extern "C" void* IA2018_createLibForEditor() {
	return ::Petri::MemberPetriDynamicLib::libForEditor("IA2018", 12346);
}
