/*
 * Generated by the petri net editor - https://github.com/rems4e/petri
 * Version 2.1.5
 */

#include "../Deplacement.h"
#include "../Servo.h"
#include "../Utils.h"
#include "Runtime/Cpp/Action.h"
#include "Runtime/Cpp/Atomic.h"
#include "Runtime/Cpp/MemberPetriDynamicLib.h"
#include "Runtime/Cpp/PetriDebug.h"
#include "Runtime/Cpp/PetriUtils.h"
#include <cstdint>

#define EXPORT extern "C"
#define PETRI_PREFIX "attraperBoules"

using namespace Petri;

struct FillResult {
	void* start;
	void* end;
};

extern "C" FillResult
    ouvrirFesses_fill(PetriNet& petriNet, std::uint64_t entitiesOffset, std::uint_fast32_t variablesOffset, bool firstLevel);
extern "C" FillResult
    fermerFesses_fill(PetriNet& petriNet, std::uint64_t entitiesOffset, std::uint_fast32_t variablesOffset, bool firstLevel);

static Petri_actionResult_t state_0_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_1_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_2_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_3_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(reculerDe(static_cast<Distance>(10_cm)));
}

static Petri_actionResult_t state_34_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(avancerDe(static_cast<Distance>(10_cm)));
}

static Petri_actionResult_t state_35_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(setVitesseLineaireLente());
}

static Petri_actionResult_t state_36_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_) {
	return static_cast<actionResult_t>(resetVitesseLineaire());
}

static bool transition_44_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_37_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_38_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_39_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_40_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_41_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_42_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_43_invocation(Entity& _PETRI_PRIVATE_GET_ENTITY_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}


EXPORT FillResult attraperBoules_fill(PetriNet& petriNet, std::uint64_t entitiesOffset, std::uint_fast32_t variablesOffset, bool firstLevel) {
	auto& state_0 =
	    petriNet.addAction(Action(petriNet, 0 + entitiesOffset, "Root_Entry", &state_0_invocation, 0), firstLevel, variablesOffset);
	auto& state_1 = petriNet.addAction(Action(petriNet, 1 + entitiesOffset, "Root_End", &state_1_invocation, 1), false, variablesOffset);
	auto& state_2 = petriNet.addAction(Action(petriNet, 2 + entitiesOffset, "Root_BEGIN", &state_2_invocation, 0), false, variablesOffset);
	auto& state_3 = petriNet.addAction(Action(petriNet, 3 + entitiesOffset, "Root_144", &state_3_invocation, 1), false, variablesOffset);
	auto& state_34 =
	    petriNet.addAction(Action(petriNet, 34 + entitiesOffset, "Root_490", &state_34_invocation, 1), false, variablesOffset);
	auto& state_35 =
	    petriNet.addAction(Action(petriNet, 35 + entitiesOffset, "Root_602", &state_35_invocation, 1), false, variablesOffset);
	auto& state_36 =
	    petriNet.addAction(Action(petriNet, 36 + entitiesOffset, "Root_605", &state_36_invocation, 1), false, variablesOffset);
	auto state_4_endpoints = ouvrirFesses_fill(petriNet, entitiesOffset + 4, petriNet.variablesCount(), false);
	auto state_19_endpoints = fermerFesses_fill(petriNet, entitiesOffset + 19, petriNet.variablesCount(), false);


	auto& transition_44 = state_0.addTransition(44 + entitiesOffset, "Root_Entry_to_BEGIN", state_2, &transition_44_invocation);
	auto& transition_37 =
	    state_3.addTransition(37 + entitiesOffset, "Root_494", (*reinterpret_cast<Action*>(state_19_endpoints.start)), &transition_37_invocation);
	auto& transition_38 =
	    (*reinterpret_cast<Action*>(state_19_endpoints.end)).addTransition(38 + entitiesOffset, "Root_495", state_34, &transition_38_invocation);
	auto& transition_39 =
	    (*reinterpret_cast<Action*>(state_4_endpoints.end)).addTransition(39 + entitiesOffset, "Root_603", state_35, &transition_39_invocation);
	auto& transition_40 = state_35.addTransition(40 + entitiesOffset, "Root_604", state_3, &transition_40_invocation);
	auto& transition_41 = state_34.addTransition(41 + entitiesOffset, "Root_606", state_36, &transition_41_invocation);
	auto& transition_42 = state_36.addTransition(42 + entitiesOffset, "Root_635", state_1, &transition_42_invocation);
	auto& transition_43 =
	    state_2.addTransition(43 + entitiesOffset, "Root_636", (*reinterpret_cast<Action*>(state_4_endpoints.start)), &transition_43_invocation);

	return (FillResult){&state_0, &state_1};
}

EXPORT void* attraperBoules_create() {
	auto petriNet = std::make_unique<PetriNet>(PETRI_PREFIX);
	attraperBoules_fill(*petriNet, 0, 0, true);
	return petriNet.release();
}

EXPORT void* attraperBoules_createDebug() {
	auto petriNet = std::make_unique<PetriDebug>(PETRI_PREFIX);
	attraperBoules_fill(*petriNet, 0, 0, true);
	return petriNet.release();
}

EXPORT char const* attraperBoules_getHash() {
	return "5449DE28B715F01E52022A6A907F757223140745";
}

#define NO_C_PETRI_NET
#include "Runtime/C/detail/Types.hpp"

EXPORT void* attraperBoules_createLibForEditor() {
	return new ::PetriDynamicLib{std::make_unique<::Petri::MemberPetriDynamicLib>(false, "attraperBoules", 12346)};
}
