/*
 * Generated by PetriLab - https://sigilence-technologies.com/petrilab
 * Version 3.0.0-beta1
 */

#include "../Deplacement.h"
#include "../Moteur.h"
#include "../Servo.h"
#include "../Utils.h"
#include <cstdint>
#include <petrilab/Cpp/Action.h>
#include <petrilab/Cpp/MemberPetriDynamicLib.h>
#include <petrilab/Cpp/PetriDebug.h>
#include <petrilab/Cpp/PetriUtils.h>
#include <petrilab/Cpp/VarSlot.h>
#include <petrilab/Cpp/Variable.h>

using namespace Petri;

struct FillResult {
	void* start;
	void* end;
};

enum Petri_Var_Enum : std::uint_fast32_t { Petri_Var_Enum_Vresult = 0 };

static void fillVariables(Petri::VarSlot& variables) {
	variables[Petri_Var_Enum_Vresult].setName("$result");
	variables[Petri_Var_Enum_Vresult].setDefaultValue(0);
}

extern "C" Petri_actionResult_t PoserCubes_entryInit(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	if(!_PETRI_PRIVATE_GET_VARIABLES_.isFirstSlot()) {
		_PETRI_PRIVATE_GET_VARIABLES_.pushVariables(1);
	}
	fillVariables(_PETRI_PRIVATE_GET_VARIABLES_);
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

extern "C" Petri_actionResult_t PoserCubes_exitAction(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	auto _PETRI_PRIVATE_EXEC_RESULT_ = static_cast<actionResult_t>(Petri::Utility::doNothing());
	auto _PETRI_PRIVATE_GET_RETURN_VALUE_0_ = _PETRI_PRIVATE_GET_VARIABLES_[Petri_Var_Enum_Vresult].value();
	_PETRI_PRIVATE_GET_VARIABLES_.pop();
	_PETRI_PRIVATE_GET_VARIABLES_.pushReturnValues(1);
	_PETRI_PRIVATE_GET_VARIABLES_[0].setName("result");
	_PETRI_PRIVATE_GET_VARIABLES_[0].value() = _PETRI_PRIVATE_GET_RETURN_VALUE_0_;
	return _PETRI_PRIVATE_EXEC_RESULT_;
}

static Petri_actionResult_t state_3_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(Petri::Utility::doNothing());
}

static Petri_actionResult_t state_4_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(recallageHaut(static_cast<Distance>(0_m)));
}

static Petri_actionResult_t state_5_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(desactiverAvaleurs());
}

static Petri_actionResult_t state_6_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(reculerDe(static_cast<Distance>(5_cm)));
}

static Petri_actionResult_t state_7_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(descendreLoquet());
}

static Petri_actionResult_t state_8_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(ouvrirPorteCube());
}

static Petri_actionResult_t state_9_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(setVitesseLineaireLente());
}

static Petri_actionResult_t state_10_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(reculerDe(static_cast<Distance>(10_cm)));
}

static Petri_actionResult_t state_11_invocation(VarSlot& _PETRI_PRIVATE_GET_VARIABLES_) {
	return static_cast<actionResult_t>(resetVitesseLineaire());
}

static bool transition_23_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_12_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_13_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_14_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_15_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_16_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_17_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_18_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_19_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_20_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_21_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}

static bool transition_22_invocation(VarSlot const& _PETRI_PRIVATE_GET_VARIABLES_, Petri_actionResult_t _PETRI_PRIVATE_GET_ACTION_RESULT_) {
	return true;
}


extern "C" FillResult PoserCubes_fill(PetriNet& petriNet,
                                      std::uint64_t entitiesOffset,
                                      bool firstLevel,
                                      Petri_actionResult_t (*initEntryPtr)(VarSlot&),
                                      Petri_actionResult_t (*exitActionPtr)(VarSlot&)) {
	auto& state_0 = petriNet.addAction(Action(0 + entitiesOffset, "Root_Entry", initEntryPtr, 0), firstLevel);
	auto& state_2 = petriNet.addAction(Action(2 + entitiesOffset, "Root_End", exitActionPtr, 1), false);
	auto& state_3 = petriNet.addAction(Action(3 + entitiesOffset, "Root_BEGIN", &state_3_invocation, 0), false);
	auto& state_4 = petriNet.addAction(Action(4 + entitiesOffset, "Root_recallage", &state_4_invocation, 1), false);
	auto& state_5 = petriNet.addAction(Action(5 + entitiesOffset, "Root_avaleurs", &state_5_invocation, 1), false);
	auto& state_6 = petriNet.addAction(Action(6 + entitiesOffset, "Root_reculer", &state_6_invocation, 2), false);
	auto& state_7 = petriNet.addAction(Action(7 + entitiesOffset, "Root_loquet", &state_7_invocation, 1), false);
	auto& state_8 = petriNet.addAction(Action(8 + entitiesOffset, "Root_porte", &state_8_invocation, 1), false);
	auto& state_9 = petriNet.addAction(Action(9 + entitiesOffset, "Root_vitesse", &state_9_invocation, 1), false);
	auto& state_10 = petriNet.addAction(Action(10 + entitiesOffset, "Root_reculer", &state_10_invocation, 1), false);
	auto& state_11 = petriNet.addAction(Action(11 + entitiesOffset, "Root_vitesse", &state_11_invocation, 1), false);


	state_0.addTransition(23 + entitiesOffset, "Root_Entry_to_BEGIN", state_3, &transition_23_invocation);
	state_3.addTransition(12 + entitiesOffset, "Root_", state_4, &transition_12_invocation);
	state_3.addTransition(13 + entitiesOffset, "Root_", state_5, &transition_13_invocation);
	state_4.addTransition(14 + entitiesOffset, "Root_", state_6, &transition_14_invocation);
	state_5.addTransition(15 + entitiesOffset, "Root_", state_6, &transition_15_invocation);
	state_6.addTransition(16 + entitiesOffset, "Root_", state_7, &transition_16_invocation);
	state_7.addTransition(17 + entitiesOffset, "Root_", state_8, &transition_17_invocation);
	state_7.addTransition(18 + entitiesOffset, "Root_", state_9, &transition_18_invocation);
	state_8.addTransition(19 + entitiesOffset, "Root_", state_10, &transition_19_invocation);
	state_9.addTransition(20 + entitiesOffset, "Root_", state_10, &transition_20_invocation);
	state_10.addTransition(21 + entitiesOffset, "Root_", state_11, &transition_21_invocation);
	state_11.addTransition(22 + entitiesOffset, "Root_", state_2, &transition_22_invocation);

	return (FillResult){&state_0, &state_2};
}
namespace Petri {
	namespace Generated {
		namespace PoserCubes {
			std::unique_ptr<::Petri::PetriNet> createPetriNet() {
				auto petriNet = std::make_unique<PetriNet>("PoserCubes", 1);
				petriNet->setLogVerbosity(PetriNet::VerbosityNothing);
				PoserCubes_fill(*petriNet, 0, true, &PoserCubes_entryInit, &PoserCubes_exitAction);
				fillVariables(petriNet->variables());
				return petriNet;
			}

			std::unique_ptr<::Petri::PetriDebug> createDebugPetriNet() {
				auto petriNet = std::make_unique<PetriDebug>("PoserCubes", 1);
				petriNet->setLogVerbosity(PetriNet::VerbosityNothing);
				PoserCubes_fill(*petriNet, 0, true, &PoserCubes_entryInit, &PoserCubes_exitAction);
				fillVariables(petriNet->variables());
				return petriNet;
			}
		}
	}
}

extern "C" void* PoserCubes_create() {
	return Petri::Generated::PoserCubes::createPetriNet().release();
}

extern "C" void* PoserCubes_createDebug() {
	return Petri::Generated::PoserCubes::createDebugPetriNet().release();
}

extern "C" char* PoserCubes_evaluate(void* vars, char const* libPath) {
	return Petri::Utility::loadEvaluateAndInvoke(vars, libPath, "PoserCubes");
}
extern "C" char const* PoserCubes_getHash() {
	return "5810AD725F817AE2C6A48EC3F695213BBACACB3BE0A1ECB9C7C24F197842A0F2";
}


extern "C" void* PoserCubes_createLibForEditor() {
	return ::Petri::MemberPetriDynamicLib::libForEditor("PoserCubes", 12346);
}
